{"version":3,"sources":["Cell.js","Row.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","value","columnIndex","index","color","className","onClick","Row","row","map","cell","i","App","props","state","jugador1","jugador2","tiroActual","board","finJuego","mensaje","score","score2","juega","bind","r","c","push","this","setState","status","comprobarGanador","turnoJugador","checkVertical","checkHorizontal","checkDiagonal","iniciarBoard","class","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAgBiBA,EAhBJ,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MAC5BC,EAAQ,QAOZ,OANc,IAAVH,EACFG,EAAQ,MACW,IAAVH,IACTG,EAAQ,UAIR,6BACE,sBAAKC,UAAU,OAAOC,QAAS,WAAQH,EAAMD,IAA7C,cACE,qBAAKG,UAAWD,EAAhB,eADF,UCEOG,EAVH,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,IAAKL,EAAY,EAAZA,MAEhB,OACE,+BACGK,EAAIC,KAAI,SAACC,EAAMC,GAAP,OAAa,cAAC,EAAD,CAAcV,MAAOS,EAAMR,YAAaS,EAAGR,MAAOA,GAAvCQ,MADnC,QCgKSC,E,kDAhKb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,SAAU,EACVC,SAAU,EACVC,WAAY,KACZC,MAAO,GACPC,UAAU,EACVC,QAAS,GACTC,MAAO,EACPC,OAAQ,GAGV,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,gBAdI,E,gDAkBnB,WAIE,IAFA,IAAIN,EAAQ,GAEHO,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,IADA,IAAIjB,EAAM,GACDkB,EAAI,EAAGA,EAAI,EAAGA,IACrBlB,EAAImB,KAAK,MAEXT,EAAMS,KAAKnB,GAGboB,KAAKC,SAAS,CACZX,QACAD,WAAYW,KAAKd,MAAMC,SACvBI,UAAU,EACVC,QAAS,O,0BAKb,WACE,OAAQQ,KAAKd,MAAMG,aAAeW,KAAKd,MAAMC,SAAYa,KAAKd,MAAME,SAAWY,KAAKd,MAAMC,W,mBAI5F,SAAMW,GACJ,IAAIE,KAAKd,MAAMK,SAAS,CAGtB,IADA,IAAID,EAAQU,KAAKd,MAAMI,MACdO,EAAI,EAAGA,GAAK,EAAGA,IACtB,IAAKP,EAAMO,GAAGC,GAAI,CAChBR,EAAMO,GAAGC,GAAKE,KAAKd,MAAMG,WACzB,MAIJ,IAAIa,EAASF,KAAKG,mBACfD,IAAWF,KAAKd,MAAMC,SACvBa,KAAKC,SAAU,CAACX,QAAOC,UAAU,EAAMC,QAAS,2BAC9CC,MAAOO,KAAKd,MAAMO,MAAQ,IAEnBS,IAAWF,KAAKd,MAAME,SAC/BY,KAAKC,SAAU,CAACX,QAAOC,UAAU,EAAMC,QAAS,+BAAgCE,OAAQM,KAAKd,MAAMQ,OAAS,IAI5GM,KAAKC,SAAU,CAACX,QAAOD,WAAYW,KAAKI,iBAI1CJ,KAAKC,SAAS,CAAGZ,WAAYW,KAAKI,oB,2BAKtC,SAAcd,GAEZ,IAAK,IAAIO,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAIR,EAAMO,GAAGC,IAAMR,EAAMO,GAAGC,KAAOR,EAAMO,EAAE,GAAGC,IAAMR,EAAMO,GAAGC,KAAOR,EAAMO,EAAE,GAAGC,IAAMR,EAAMO,GAAGC,KAAOR,EAAMO,EAAE,GAAGC,GAC9G,OAAOR,EAAMO,GAAGC,K,6BAOxB,SAAgBR,GACd,IAAK,IAAIO,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAIR,EAAMO,GAAGC,IAAMR,EAAMO,GAAGC,KAAOR,EAAMO,GAAGC,EAAE,IAAMR,EAAMO,GAAGC,KAAOR,EAAMO,GAAGC,EAAE,IAAMR,EAAMO,GAAGC,KAAOR,EAAMO,GAAGC,EAAE,GAC9G,OAAOR,EAAMO,GAAGC,K,2BAOxB,SAAcR,GACZ,IAAK,IAAIO,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAIR,EAAMO,GAAGC,IAAMR,EAAMO,GAAGC,KAAOR,EAAMO,EAAE,GAAGC,EAAE,IAC5CR,EAAMO,GAAGC,KAAOR,EAAMO,EAAE,GAAGC,EAAE,IAC7BR,EAAMO,GAAGC,KAAOR,EAAMO,EAAE,GAAGC,EAAE,GAE/B,OAAOR,EAAMO,GAAGC,GAItB,IAAK,IAAID,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAIR,EAAMO,GAAGC,IAAMR,EAAMO,GAAGC,KAAOR,EAAMO,EAAE,GAAGC,EAAE,IAAMR,EAAMO,GAAGC,KAAOR,EAAMO,EAAE,GAAGC,EAAE,IAAMR,EAAMO,GAAGC,KAAOR,EAAMO,EAAE,GAAGC,EAAE,GACpH,OAAOR,EAAMO,GAAGC,K,8BAQxB,SAAiBR,GACf,OAAOU,KAAKK,cAAcL,KAAKd,MAAMI,QAAUU,KAAKM,gBAAgBN,KAAKd,MAAMI,QAAUU,KAAKO,cAAcP,KAAKd,MAAMI,S,gCAIzH,WACEU,KAAKQ,iB,oBAIP,WAAU,IAAD,OACP,OAEE,gCACE,iDACA,qBAAK/B,UAAU,SAASC,QAAS,WAAO,EAAK8B,gBAA7C,yBAEA,sBAAK/B,UAAU,QAAf,UACE,iCAAQ,oBAAGA,UAAU,UAAb,wBAAkC,+BAAOuB,KAAKd,MAAMO,aAC5D,iCAAQ,oBAAGhB,UAAU,UAAb,wBAAkC,+BAAOuB,KAAKd,MAAMQ,iBAG9D,kCACE,0BAEA,gCAEGM,KAAKd,MAAMI,MAAMT,KAAI,SAACD,EAAKG,GAAN,OAAa,cAAC,EAAD,CAAaH,IAAKA,EAAKL,MAAO,EAAKoB,OAAzBZ,WAIjD,8BACC,oBAAI0B,MAAM,UAAV,SAAqBT,KAAKd,MAAMM,mB,GAxJvBkB,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c96273ba.chunk.js","sourcesContent":["const Cell = ({ value, columnIndex, index }) => {\n    let color = 'white'; // iniciamos las celdas en color blanco\n    if (value === 1) {\n      color = 'red';\n    } else if (value === 2) {\n      color = 'yellow';\n    }\n      \n    return (\n      <td>\n        <div className=\"cell\" onClick={() => { index(columnIndex) } }> {/* creamos una funcion para obtener el indice de la celda */}\n          <div className={color}> </div> {/* le pasamos el estilo css a la celda dependiendo el value */}\n        </div>\n      </td>\n    );\n  };\n  export default Cell;","import Cell from './Cell.js';\n\nconst Row = ({ row, index }) => {\n\n    return (\n      <tr>\n        {row.map((cell, i) => <Cell key={i} value={cell} columnIndex={i} index={index} />)} {/* Pasamos las props de la celda*/}\n        {/* Como en el componente principal es una tabla recorremos las filas con los indeces de las celdas */}\n      </tr>\n    );\n  };\n\nexport default Row;","import './App.css';\nimport React, { Component } from 'react';\nimport Row from './Row';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      jugador1: 1,\n      jugador2: 2,\n      tiroActual: null, /** currentPlayer */\n      board: [],\n      finJuego: false,\n      mensaje: '',\n      score: 0,\n      score2: 0\n    };\n\n    this.juega = this.juega.bind(this);\n\n  } /** final del constructor */\n\n  iniciarBoard() {\n    // Creamos una matriz de 6x7 para el board\n    let board = [];\n\n    for (let r = 0; r < 6; r++) { //recore las filas a 6 filas\n      let row = [];\n      for (let c = 0; c < 7; c++) {  //recorre las columnas a 7 columnas\n        row.push(null) \n      }\n      board.push(row); //agrega las filas al board\n    }\n\n    this.setState({\n      board,\n      tiroActual: this.state.jugador1,\n      finJuego: false,\n      mensaje: '',\n    });\n  }\n\n  /** togglePlayer */\n  turnoJugador() {\n    return (this.state.tiroActual === this.state.jugador1) ? this.state.jugador2 : this.state.jugador1;\n    /* el estado del jugador en turno es el estado del tiro actual */\n  }\n\n  juega(c){\n    if(!this.state.finJuego){     //Si el estado del finjuego es verdadero\n\n      let board = this.state.board;\n      for (let r = 5; r >= 0; r--) {\n        if (!board[r][c]) {\n          board[r][c] = this.state.tiroActual;\n          break;\n        }\n      }\n\n      let status = this.comprobarGanador();\n      if(status === this.state.jugador1){\n        this.setState( {board, finJuego: true, mensaje: 'Ganador jugador 1 (rojo)', // counter to state score\n          score: this.state.score + 1,\n      } );\n      } else if (status === this.state.jugador2) {\n        this.setState( {board, finJuego: true, mensaje: 'Ganador jugador 2 (amarillo)', score2: this.state.score2 + 1,\n      } );\n      }\n      else{\n        this.setState( {board, tiroActual: this.turnoJugador()});\n      }\n\n  \n      this.setState({  tiroActual: this.turnoJugador() }); // seteamos el estado anterior en una nueva funcion \n    }\n  }\n\n  // Comprobar ganador en verticalmente \n  checkVertical(board) {\n    // Comprobar que row sea mayor a 3\n    for (let r = 3; r < 6; r++) {\n      for (let c = 0; c < 7; c++) {\n        if (board[r][c] && board[r][c] === board[r-1][c] && board[r][c] === board[r-2][c] && board[r][c] === board[r-3][c]) {\n          return board[r][c];\n        }\n      }\n    } \n  }\n\n  // Comprobar ganador en horizontalmente\n  checkHorizontal(board) {\n    for (let r = 0; r < 6; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (board[r][c] && board[r][c] === board[r][c+1] && board[r][c] === board[r][c+2] && board[r][c] === board[r][c+3]) {\n          return board[r][c];\n        }\n      }\n    }\n  }\n\n  // comprobar ganador en diagonal\n  checkDiagonal(board) {\n    for (let r = 0; r < 3; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (board[r][c] && board[r][c] === board[r+1][c+1] && \n            board[r][c] === board[r+2][c+2] && \n            board[r][c] === board[r+3][c+3]) \n          {\n          return board[r][c];\n        }\n      }\n    }\n    for (let r = 0; r < 3; r++) {\n      for (let c = 3; c < 7; c++) {\n        if (board[r][c] && board[r][c] === board[r+1][c-1] && board[r][c] === board[r+2][c-2] && board[r][c] === board[r+3][c-3]) {\n          return board[r][c];\n        }\n      }\n    }\n  }\n\n\n  // Return checkVertical in a new funtion\n  comprobarGanador(board) {\n    return this.checkVertical(this.state.board) || this.checkHorizontal(this.state.board) || this.checkDiagonal(this.state.board);\n  }\n\n\n  componentWillMount() {\n    this.iniciarBoard();\n  }\n  \n\n  render() {\n    return (\n    \n      <div>\n        <h2>Juego Conecta 4</h2>\n        <div className=\"button\" onClick={() => {this.iniciarBoard()}}>Nuevo juego</div>\n\n        <div className=\"score\">\n          <strong><p className=\"player1\">Jugador 1: <span>{this.state.score}</span></p></strong>\n          <strong><p className=\"player2\">Jugador 2: <span>{this.state.score2}</span></p></strong>\n        </div>\n\n        <table>\n          <thead>\n          </thead>\n          <tbody>\n            {/* Recorremos el array row */}\n            {this.state.board.map((row, i) => (<Row key={i} row={row} index={this.juega} />) )}\n          </tbody>\n        </table>\n\n        <div>\n         <h5 class=\"mensaje\">{this.state.mensaje}</h5> \n        </div>\n        \n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}